{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/why-i-dropped-expo-for-react-native","webpackCompilationHash":"26c87398157039e4f2d2","result":{"data":{"site":{"siteMetadata":{"repoUrl":"https://github.com/giacomocerquone/giacomocerquone.com/tree/master/content/blog"}},"markdownRemark":{"id":"f77c132d-9b26-59e4-bc83-f8b7be9bcb41","excerpt":"As some of you may know, I’m currently working as a freelancer in react native and constantly shipping and curating some apps. I may not have created 100+ apps…","html":"<p>As some of you may know, I’m currently working as a freelancer in react native and constantly shipping and curating some apps. I may not have created 100+ apps like this guy on reddit, but I made quite a few of them and all were data centric with lots of screens and user inputs handling (we don’t like simple challenges right?).\nFor one of the last I also needed a personalized component that required some tweaking around the two libs gesture-handler and reanimated.</p>\n<p>I started developing in pure React Native 3 years ago. The project was surely more immature than now but the major pain point for me was the unknown native side and after that I gave expo a try, it looked like heaven.\nExpo has an awesome developer experience, so awesome that it becomes almost instantly poisonous.\nThey created a smart structure that locks you in (not on purpose but based on the limitations that come from having such a painless experience), and once you’re in you soon start to think that without what expo gives you, would not be possible to build what you’re building and that once made that choice, you cannot easily go back. </p>\n<h2>We should not avoid what’s native</h2>\n<p>The first thing you’re trying to avoid when using expo is the very reason why react native, or any other technology that follows the same structure, is better than any other previous cross-platform solution: the native side of your app.\nIt’s comprehensible, it’s a mistake I did too the one of trying to avoid at all costs touching the native projects with their respective IDEs and we’re not even talking about writing native (that is a thing I’m not yet comfortable with), but just configuration.\nBut turns out that it’s actually a strong point having at hand all the goodies of the native projects.\nIt’s obvious that being web devs we know nothing about native development, but in order to survive to all the stuff you need to do to build a mobile app, they built all kinds of simplification like the icon generator, the visual tool to build UI and many other stuff that help us a lot (sometimes not as much as expo but still it’s almost equally simple).</p>\n<h2>The technical problems I’ve found</h2>\n<p>Not that I’m leaving expo because I have encountered technical problems with it, but here there are a few I encountered in my pretty long and intense journey.</p>\n<ul>\n<li>An inconsistency between the dev and the prod environment, meaning that sometimes the app in prod will crash without knowing why (and it’s such a painful experience since you don’t know how to debug, logcat for android for example is almost never helpful in that) and it has very often to do with the app.json file of your app that is missing the right configurations.</li>\n<li>Some APIs that just do not work. I’ve followed all the new “background” geolocation implementation introduced in SDK 32 and, in SDK 34, it still doesn’t work. They know it of course, but the expo team has such a large number of things to look for that I understand it’s not easy at all.</li>\n</ul>\n<p>It feels horribly wrong when loading fonts, for example, to call that “loadAsync” (the fonts are normally imported in the native project in a bare react native environment instead of being loaded at runtime).</p>\n<p>Seeing react-native/Obj-c/Java issues for the first times is a bit like reading complex math for the first times too! Initially you don’t understand shit, but as you get comfortable with the notation, syntax and terminology you start solving problems.</p>\n<p>about expo</p>\n<p>anyway the limitation are explicit in their website and others, well, are implicit of course since questions like: “will that thing ever work?” “who knows? Maybe in v34, but not in v36” etc. etc.</p>\n<p>One of the things it makes me sad the most is that even the official React Native docs advice sometime to use Expo for trivial reasons.</p>","frontmatter":{"title":"Why I Dropped Expo and embraced React Native","date":"November 09, 2019","description":"What are the main problems with Expo now? And what are the advantages of using a pure React Native workflow?","image":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"dir":"/why-i-dropped-expo/why-i-dropped-expo/","slug":"/blog/why-i-dropped-expo-for-react-native","previous":{"fields":{"slug":"/blog/fetch-wrapper","dir":"/fetch-wrapper/fetch-wrapper/"},"frontmatter":{"title":"A very simple fetch wrapper ready to use"}},"next":null}}}