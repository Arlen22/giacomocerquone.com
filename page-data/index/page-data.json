{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"6c674fbcb83dbcb49619","result":{"data":{"site":{"siteMetadata":{"title":"Giacomo Cerquone","description":"Giacomo Cerquone, developer"}},"allMarkdownRemark":{"edges":[{"node":{"fileAbsolutePath":"/home/travis/build/giacomocerquone/giacomocerquone.com/content/home/bio.md","html":"<p>I love computer science and making beatiful programs.\nI have a computer science bachelor degree and 3 years of work experience as a remote freelancer.\nCinephile, astronomy lover, coffe and tea enthusiast and passionate about new technologies.\n<br>\n<strong>Writer</strong> and <strong>Admin</strong> @<a href=\"https://italiancoders.it/author/giacomo-cerquone/\">italiancoders.it</a> and @<a href=\"https://giacomocerquone.com/blog\">giacomocerquone.com</a></p>","frontmatter":{"title":null,"section":"bio","slug":null,"description":null}}},{"node":{"fileAbsolutePath":"/home/travis/build/giacomocerquone/giacomocerquone.com/content/home/pubs.md","html":"<p>A list of my publications on free online resources.</p>\n<p><a href=\"https://it.wikipedia.org/wiki/Utente:Giacomocerquone\">Wikipedia</a>: <a href=\"https://it.wikipedia.org/wiki/ECMAScript\">ECMAScript</a><br />\n<a href=\"https://developer.mozilla.org/it/profiles/giacomocerquone\">Mozilla.org</a>: <a href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">Apply</a> <br/>\n<a href=\"https://italiancoders.it/author/giacomo-cerquone/\">ItalianCoders.it</a>: <a href=\"https://italiancoders.it/routing-delle-applicazioni-angular/\">Angular Routing</a>, <a href=\"https://italiancoders.it/creare-un-bot-per-messenger-in-nodejs/\">Facebook bot</a></p>","frontmatter":{"title":"Minor publications","section":"pubs","slug":null,"description":null}}},{"node":{"fileAbsolutePath":"/home/travis/build/giacomocerquone/giacomocerquone.com/content/blog/fetch-wrapper/fetch-wrapper.md","html":"<p>Hi there, hope you’re enjoying the new website and blog.\nI graduated one month ago and so I hope I’ll have some more time to dedicate to my personal stuff, including this blog.</p>\n<h2>What is a wrapper</h2>\n<p>We obtain many different results when “wrapping” something: there are wrappers that turns out to be libraries and wrappers that are so small that they’re just an agglomerated amount of code that simplify other’s lives. Mine is one of the second kind.<br>\nI wanted to make this clear because I’ve seen projects like <a href=\"https://github.com/elbywan/wretch\">this</a> that are defined as wrappers but, despite the fact that it has no dependencies included, it has so many features and imposes so much syntax* and structures that it isn’t just a wrapper anymore, but a small lib.</p>\n<blockquote>\n<p>For syntax I mean functions and other named components of the lib that implements a pre-defined functionality</p>\n</blockquote>\n<h2>An API “service”</h2>\n<p>In my <a href=\"./aborting-fetch-react-native/\">older post</a> I mentioned of an Api “service”.<br />\n<a href=\"https://gist.github.com/giacomocerquone/61a3b016c1803d44573978c13452989f\">Here</a> you can find the last revision of this module (it’s just a gist) but I won’t assure you to update that since I’m preparing another repo relative to some react native resources that you’ll soon find a post in here.</p>\n<p>I started to create my own Api service since the beginning of my work and the first one I used was found on a github repo that I don’t have anymore (not that it’s important since it’s completely changed).\nIt stayed the same for a long time (and it is the same in some old projects) but also for the sake of this article I decided to mutate its syntax and enhance some functionalities.</p>\n<h2>Abortion</h2>\n<p>I wrote the last article about cancellation and abortion of HTTP requests. I sent that article to some people that requested it on a github issue and a guy fixed a little error he spot in my post (it’s about the support for xhr that is, indeed, supported in react native while I thought it wasn’t, <a href=\"https://github.com/facebook/react-native/blob/master/Libraries/Network/XMLHttpRequest.js#L534\">go check yourself</a>.\nIn the meantime support for the AbortController API has landed in react native 0.60 and so in this module I’ve also put up an abortion implementation and a working polyfill for environments that don’t support it (based on the last article’s code).</p>\n<h2>The challenge: defining the api</h2>\n<p>It has been a little bit challenging not only implementing it, which <a href=\"https://github.com/jfet97\">jfet</a> helped a bit with his wise advices, but also setting the boundaries of the functionalities that this wrapper had to provide and you can observe the culprit of these indecisions in the “setGetToken” which is actually a strange thing considering that you could just import the getToken method there and use it.\nBut you know, it’s open source and after all it’s not that difficult.</p>","frontmatter":{"title":"A very simple fetch wrapper ready to use","section":null,"slug":"blog/fetch-wrapper","description":"An handy thin fetch wrapper in less of 100 lines featuring abortion (with polyfill for non supporting envs), token setter etc."}}},{"node":{"fileAbsolutePath":"/home/travis/build/giacomocerquone/giacomocerquone.com/content/blog/aborting-fetch-react-native/aborting-fetch-react-native.md","html":"<p>EDIT: this post is now, happily, outdated since the AbortController implementation has been included in React Native 0.60.0 (<a href=\"https://github.com/facebook/react-native/issues/18115#issuecomment-508389569\">comment here</a>)</p>\n<p>I’m doing this post since there is a lot of confusion going on around the react native (and web too actually) community around the matter of “cancelling a request” and many people asked me through the github issues to clear up the matter.</p>\n<h2>What do we mean by “closing a connection”?</h2>\n<p>This is really an important thing to understand.</p>\n<ol>\n<li>One thing is the interface exposed by the method used to request something</li>\n<li>And one thing is the actual method used to request something</li>\n</ol>\n<h3>What is this differentiation?</h3>\n<p>Because since we know that Fetch exposes its functionalities through Promises, we easily know how to reject the Promise relative to the request and doing so we “shut the door” to <strong>every future</strong> data that may come from that Promise. (1)\nBut what is the actual meaning of just rejecting the Promise that initiated the connection? It means that the connection will continue to live and, potentially, download lots of data in background. This because rejecting a promise <strong>operates just with the Fetch’s Promise but not with Fetch itself</strong> that won’t stop the work it is doing (examples and demonstrations later on).</p>\n<p>When we’re talking about few kilobytes (a json response that we’re waiting from a REST API for example) this is completely fine, and in that case rejecting the promise without stopping the real connection will be enough. This solution has come to the surface especially in relation to a famous issue about calling setState on an unmounted component. This issue has to do with the <a href=\"https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\">React internals</a> and it’s pretty easy to understand, also lot of blogs talk about it.\nAnyway this thing we just talked about may not affect you depending on how you wrote your code (for example you will not notice this problem if you use Redux).</p>\n<p>But what if we’re talking about the download of a heavier kind of data? This is the exact situation where I was in during the development of an enterprise application in React Native.\nImagine the UI showing a button to the user, while he’s in a mobile application, in a PWA or in a responsive website from a smartphone, that says “start downloading data” and then, when he press that button, the text of it changes with “stop downloading data” and he press that button again.\nWhat do we do? If we’re just rejecting the Promise it will continue to download those data since, as we said, <strong>rejecting the promise doesn’t result in a terminated connection</strong>. (2)\nAs a matter of fact, in this way, we potentially expose the user to pay extra money for his mobile carrier contract and this is something we want absolutely to avoid.</p>\n<p>So how can we tell Fetch to stop the connection and let the network module of our device rest?</p>\n<h2>What the specs says</h2>\n<p>If you ask me, the Fetch API is good but not that much. Not to be rude, but it seems like they almost forgot to design something that could be production ready.\nSo long story short, after a first 2015 “abort functionality” request, they succesfully introduced it in 2017.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\">Here the MDN specs</a> and here <a href=\"https://developers.google.com/web/updates/2017/09/abortable-fetch\">Jake Archibald talking about it in google developers</a>.</p>\n<p>Shortly this is an example of a cancelled request through the abort method (I will not go into details here since it isn’t in the scope of this article):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> signal <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span>signal\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Really cool, isn’t it? When I discovered this I ran into my code editor to edit my “api service” that wraps and enhance fetch, and implemented it.\nStarted the React Native project I was trying to abort my requests but nothing was happening (not even an error), so I immediately opened an <a href=\"https://github.com/facebook/react-native/issues/18115\">issue on the React Native github project</a>.\nUnfortunately, as I said at the beginning of this article, there is a lot of confusion about this issue and on that github thread there are a lot of wrong explanations (my included).</p>\n<h2>Polyfills, fake things that pretend to be true</h2>\n<p>I didn’t stop there. Noticing that it wasn’t working, I started trying available polyfills on NPM and they were actually (<strong>not</strong>) working. At first I wasn’t noticing that the connections weren’t killed, rather the polyfills were wrapping the originl window.fetch and rejecting the promise… they were doing the exact same thing I explained above and that you can easily do with ten/fifteen lines of code (actually these lines of code are the exact ones that are showed in the facebook blog post I linked above).</p>\n<h3>xhr.abort()? Can this be done?</h3>\n<p>Well it turns out that the xhr obscene syntax <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\">had an abort method</a> used to terminate connections. <del>While this could be a good approach to support old browsers when you’re doing a webapp, this isn’t a viable option in React Native since only fetch is baked inside the core.</del><br>\nActually I was wrong. As specified in this <a href=\"https://facebook.github.io/react-native/docs/network#using-other-networking-libraries\">doc page</a> xhr <strong>is</strong> backed into the React Native core and can be used to abort connection.<br>\nThe problem is that the fetch api is really cleaner than the xhr one and further more the migration from fetch to xhr may not be simple for certain apps (and honestly it seems a step back).</p>\n<h3>So are polyfills useless in React Native?</h3>\n<p>Yes, Yes and Yes. <strong>There will be no possible polyfills for this feature if the React Native core team doesn’t implement this first.</strong>. The only thing that it’s actually possible is to build a native module (or search for an existing one) that implement this feature on the native side too. Someone talked about this in a <a href=\"https://github.com/joltup/rn-fetch-blob/issues/140\">rn-fetch-blob issue</a> for example but I think that not even with that lib it’d work and it’s such a core functionality that I’d not rely on an external lib to accomplish it.</p>\n<h2>Conclusion</h2>\n<p>In React Native, right now, the best you can do is to use the trick showed in the previous facebook blog link and it’s something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeCancelable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">promise</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hasCanceled_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token keyword\">const</span> wrappedPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>hasCanceled_ <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isCanceled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>hasCanceled_ <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isCanceled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    promise<span class=\"token punctuation\">:</span> wrappedPromise<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      hasCanceled_ <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Anyway stay tuned because in the next article I will post my personal API service that I use for work that I built and tested time over time that implements this among other useful features that will let you forget about all the libs you know like axios, isomorphic-fetch etc. also diving even deeper on the code pasted above.</p>","frontmatter":{"title":"Aborting requests in React Native","section":null,"slug":"blog/aborting-fetch-react-native","description":"How can we close an active connection initiated with Fetch? And most important, what do we mean by \"closing a connection\"?"}}},{"node":{"fileAbsolutePath":"/home/travis/build/giacomocerquone/giacomocerquone.com/content/blog/react-binding-patterns-major-pitfalls/react-binding-patterns-major-pitfalls.md","html":"<p>In this post I assume you know and use the well known Facebook library React.\nI’ve been working for a while on some React Native projects and during this whole time it happened to me to recognize, in some code I’ve read here and there, at least 4 common patterns to give the right context to the class methods of a component.</p>\n<h2>What am I talking about?</h2>\n<p>Let’s see a quick example (got from the <a href=\"https://reactjs.org/docs/handling-events.html\">official doc</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Needed binding to access the state inside the handleClick method.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">        Say hello       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this piece of code we’re analyzing a component defined through the standard ES6 syntax used to create classes and, as we can easily see, the button, once clicked, calls the method handleClick that, thanks to the bind made in the constructor, it can reference the components’ state through the <code class=\"language-text\">this</code> keyword.</p>\n<p>Nothing too weird. This has obviously nothing to do with React, but with how functions are designed in jsx harmony (more specifically the fact that the <code class=\"language-text\">this</code> is dynamic, <a href=\"https://www.smashingmagazine.com/2014/01/understanding-jsx%20harmony-function-prototype-bind/\">more here</a>)</p>\n<p>But there are different ways to create a component and handle the methods’ contexts of that component.</p>\n<h2>Two different ways of creating a component</h2>\n<p>So we can create stateful components in various way and one of them is considered legacy and so it’s <strong>strongly discouraged</strong>, but I’ll use it anyway in order to introduce the concept of <strong>“autobinding”</strong>.</p>\n<p>In react, not too long ago, there was included a method called “createClass” that was used to create a component and, as a helper method, it made an automatic binding for all the method defined for that component. In order to discourage the usage of this function, Facebook pulled it out from the main library and extracted it in a external module.\n<a href=\"https://l.facebook.com/l.php?u=https%3A%2F%2Ftoddmotto.com%2Freact-create-class-versus-component%2F&#x26;h=ATPfcaq-a4FV6b_a4A8YRzvPmWNSTFGJfcuEXQHqkTJEg0_kJkmTepH1CAv3hk-vDGrimcGMw_C_HJ6fCOMrbLAWPga8cwfbX70mGUZ9JLeJQ53swQ\">Here you can read</a> why they prefer you to use the standard ES6 way to create classes instead of this one.</p>\n<p>The following example that is <strong>strongly discourage</strong> use this module: let’s rewrite the component from the previous paragraph:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> SayHello <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">handleClick</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">render</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Say hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you see the code is less verbose, let’s see now how to use standard es6 class to create components that are inline with the modern standards.</p>\n<h2>The most 4 common patterns</h2>\n<p>Firstly we’ll see two anti-patterns used way too often throughout a lot of react’s projects that can bring serious bad performance to the whole project.\nThen we’ll continue with the other two where the last one is a slightly fixed version of the second-last.</p>\n<h3>1. Binding in render - <em>wrong</em></h3>\n<p>In this pattern the binding is made at every render, this mean that everytime React call this method, we’re creating a new function passing the right this to it. Re-doing my first example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// Here the interesting code</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Say hello       \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What are the real problems of this approach? First of all the exact same fact that we’re creating a new function. Apart from the computational waste of creating a new reference in memory and let the “Garbage Collector” do the dirty work, things like this kill every optimization inside the shouldComponentUpdate since the function will be always different, no matter what.\nAll the people out there that use Redux, like me, know what I’m talking about and writing this kind of code in presence of the connect function, is the worst you can do.\nPlus:</p>\n<p><a href=\"https://gist.github.com/armw4/869ffb834f6cfa0b4e14a30746d44933#shouldcomponentupdate\">Here</a> some additional info on the <em>magical</em> connect function of react-redux, <a href=\"https://stackoverflow.com/questions/36677733/why-shouldnt-jsx-props-use-arrow-functions-or-bind/36677798\">Here</a> some info about the optimization problem I referenced above about the componentShouldUpdate lifecycle method.</p>\n<h3>2. Arrow function in render - <em>wrong</em></h3>\n<p>This pattern too suffers from the same problem of the previous one… it’s just a syntax change and the “bleeding edge technologies” lovers (like me) will find it more good looking being less verbose. Following the previous examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// Here the interesting code</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Say hello       \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. Binding in constructor - <em>Ok, but not optimal</em></h3>\n<p>This is what we’ve done in the very first example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Needed binding to access the state inside the handleClick method.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">        Say hello       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You will agree with me that the binding, in this way, will be executed only when a new instance of the component is created, and that’s clearly the right way to do it in terms of performance.\nThe only downside of this approach is that we’ll have to list every method we want to bind inside the constructor and call <code class=\"language-text\">.bind()</code> on each of them… we can do better!</p>\n<h3>4. Arrow function as class methods - <em>Optimal</em></h3>\n<p>In conclusion, here we are at the last pattern, the one I hope you’ll use in the future after reading this post.\nUsing always the same example, let’s see how does it become applying this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// We don't use .bind() anymore, but thanks to a Babel plugin (or typescript if you use it with React)</span>\n  <span class=\"token comment\">// and the arrow functions, we can define a property of the class that contains</span>\n  <span class=\"token comment\">// an anonymous function defined through an arrow function and so with the `this` value set to the external one</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">        Say hello       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice what I’ve written in the comments.\nTo use this syntax you gotta include a babel plugin (already included in react-native and create-react-app) that allows us to define properties inside of a ES6 class.</p>\n<p>Anyway, in this property, we store an anonymous function through a af that allows us to set the this value inside the function equal to the external one.</p>\n<h2>Extra</h2>\n<h3>Parameters</h3>\n<p>The major takeaway here is that when you have to pass parameters, instead of doing a bind in the render with the params we want to pass, we can split the chain of components and divide them.</p>\n<p>Given this initial basic example (where at every render a function is recreated):</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a long string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Say hello       \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can convert it in the following way, where no method is recreated at each render:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello!\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleClickFn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>this is my text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">handleClickFn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickFn<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Stateless Component</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">    Say hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">handleClickFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I put up a slightly more advanced example in <a href=\"https://codesandbox.io/s/zx9j93km3l\">CodeSandbox</a></p>\n<h3>@autobind decorator</h3>\n<p>There is also a decorator you can use, it’s just a babel module. This is <a href=\"https://github.com/andreypopp/autobind-decorator\">its repo</a> where you can see how to install it and a little example follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n\n  @autobind\n  <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  @autobind\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Attention: You could use this decorator over the entire class, but this is highly inconvenient and no-sense. Use it only on the methods you need to bind</em></p>","frontmatter":{"title":"React Binding Patterns, the major pitfalls","section":null,"slug":"blog/react-binding-patterns-major-pitfalls","description":"Let's discover the most used ways of assigning the right 'this' to react components functions"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}