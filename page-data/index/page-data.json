{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"9a624e0101662cf506ae","result":{"data":{"site":{"siteMetadata":{"title":"Giacomo Cerquone","description":"Giacomo Cerquone, developer"}},"allMarkdownRemark":{"edges":[{"node":{"fileAbsolutePath":"C:/Users/Giacomo/Documents/RepoPersonal/giacomocerquone.com/content/home/pubs.md","html":"<p>A list of my publications on free online resources.</p>\n<p><a href=\"https://it.wikipedia.org/wiki/Utente:Giacomocerquone\">Wikipedia</a>: <a href=\"https://it.wikipedia.org/wiki/ECMAScript\">ECMAScript</a><br />\n<a href=\"https://developer.mozilla.org/it/profiles/giacomocerquone\">Mozilla.org</a>: <a href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">Apply</a> <br/>\n<a href=\"https://italiancoders.it/author/giacomo-cerquone/\">ItalianCoders.it</a>: <a href=\"https://italiancoders.it/routing-delle-applicazioni-angular/\">Angular Routing</a>, <a href=\"https://italiancoders.it/creare-un-bot-per-messenger-in-nodejs/\">Facebook bot</a></p>","frontmatter":{"title":"Minor publications","section":"pubs","slug":null,"description":null}}},{"node":{"fileAbsolutePath":"C:/Users/Giacomo/Documents/RepoPersonal/giacomocerquone.com/content/home/bio.md","html":"<p>I love computer science and making beatiful programs.\nI have a computer science bachelor degree and 4 years of work experience as a remote freelancer mainly as a <strong>React Native/React</strong> developer.\nCinephile, astronomy lover, coffe and tea enthusiast and passionate about new technologies.\n<br>\n<strong>Writer</strong> and <strong>Admin</strong> @<a href=\"https://italiancoders.it/author/giacomo-cerquone/\">italiancoders.it</a> and @<a href=\"https://giacomocerquone.com/blog\">giacomocerquone.com</a></p>","frontmatter":{"title":null,"section":"bio","slug":null,"description":null}}},{"node":{"fileAbsolutePath":"C:/Users/Giacomo/Documents/RepoPersonal/giacomocerquone.com/content/blog/why-i-dropped-expo/why-i-dropped-expo.md","html":"<p>As some of you may know, I’m currently working as a freelancer in React Native and constantly shipping and curating some apps. I may not have created 100+ apps like this guy on <a href=\"https://dev.to/kylessg/ive-released-over-100-apps-in-react-native-since-2015-ask-me-anything-1m9g\">dev.to</a>, but I made quite a few of them and all were data centric with lots of screens and user inputs handling (we don’t like simple challenges right?).\nFor one of the last I also needed a personalized component that required some tweaking around the two libs gesture-handler and reanimated.</p>\n<h2>Disclaimer</h2>\n<p>The whole article isn’t made to go against passionate people and people who really believe in what they do (eg the Expo team). People that I find very skilled and that I personally follow on social.\nThe last thing I want to do is to discredit their work! They are awesome people and developers but as every product, Expo has its own reviews too and with this article I’ll give mine based on my little experience.</p>\n<h3>Who is this post for</h3>\n<p>Having said that, things will surely change and opinions too. Plus we all might have different ideas and an important thing is that the advices you’ll find in this post won’t work for everyone, I believe they’ll work for a developer who:</p>\n<ul>\n<li>Has always used expo and is forced to abandon it because of some requirements at work</li>\n<li>Wants to discover the internals of the framework</li>\n<li>Like me has been scared by the first versions of the framework</li>\n<li>Is tired of something in the epxo ecosystem</li>\n</ul>\n<h2>From the beginning</h2>\n<p>I started developing in pure React Native 3 years ago, it was surely a more immature framework than now and the major pain point for me was the unknown native side. After lots of fight with it (upgrading a React Native version was a huge pain, setting up some native modules just ended up screwing the entire project, and many other things) I wanted to gave expo a try, it looked like heaven: no native dependencies, no native manifest or plist to edit, nothing weird had to be done to create a splash screen and most of all, one command to build an ios app… <strong>in pure React Native long ago I struggled so much more than I should have to build an iOS app</strong> (probably because of the missing resources in the first days).\nExpo has an awesome developer experience, so awesome that it became almost instantly poisonous to me.\nThey created a beautiful structure that locks you in, not on purpose of course, but based on the limitations that come from having such a painless experience. Simplification comes always at a cost, the world itself works in this way, and the cost suddenly became too high for me.\nEspecially because once you’re in you soon start to think that without what expo does for you, would not be possible to build what you’re building and that once made that choice, you cannot easily go back.</p>\n<p>These limitations are of all kind of genres, some are explicit (they write them in <a href=\"https://docs.expo.io/versions/latest/introduction/why-not-expo/\">its website</a>) and others, well, are implicit of course, since questions like: “will that thing ever work?” “who knows? Maybe in v34, but not in v36” or like: “this core piece of my app is broken because one of your module doesn’t work. What do I do now?” “eject of course” “well why I used expo in the first place?” don’t have a straightforward answer and the answer comes at high costs</p>\n<h2>We should not avoid what’s native</h2>\n<p>The first thing you’re trying to avoid when using expo is the very reason why React Native, or any other technology that follows the same structure, is better than any other previous cross-platform solution: the native side of your app.\nIt’s comprehensible, it’s a mistake I did too the one of trying to avoid at all costs touching the native projects with their respective IDEs and we’re not even talking about writing native code (that is a thing I’m not yet comfortable with), but just configuration. But turns out that it’s actually a strong point having at hand all the native side tools.\nIt’s obvious that being web devs we know nothing about native development nor about its tools, but native developers needed simplifications too in all the tedious tasks so they built the icon generator, the visual tool to build UI and many other stuff that help us a lot (often not as much as expo but still it’s almost equally simple).\nAnd when you need to touch some code or some configuration file, I want you to remind of this: seeing react-native/Obj-c/Java code for the first time is a bit like reading complex math for the first time too! Initially you don’t understand shit, but as you get comfortable with the notation, syntax and terminology you start solving problems.</p>\n<h2>The technical problems I’ve found</h2>\n<p>Not that I’m leaving expo because I have encountered technical problems with it, but here there are a few I encountered in my pretty long and intense journey.</p>\n<ul>\n<li>An inconsistency between the dev and the prod environment, meaning that sometimes the app in prod will crash without knowing why (and it’s such a painful experience since you don’t know how to debug, logcat for android for example is almost never helpful in that) and it has very often to do with the app.json file of your app that is missing the right configurations.</li>\n<li>Some APIs that just do not work. I’ve followed all the new “background” geolocation implementation introduced in SDK 32 and, in SDK 34, it still doesn’t work. They know it of course, but the expo team has such a large number of things to look for that I understand it’s not easy at all.</li>\n<li>It feels horribly wrong when loading fonts, for example, to call that ”<a href=\"https://docs.expo.io/versions/latest/guides/using-custom-fonts/#loading-the-font-in-your-app\">loadAsync</a>” (the fonts are normally imported in the native project in a bare React Native environment instead of being loaded at runtime).</li>\n<li>I could mention many many more problems that I encountered (or I’m still encountering) in certain version of the sdk and be clear that some of them (like the one that is still in almost 2020 <a href=\"https://github.com/expo/expo/issues/2172\">affecting the keyboard behaviour</a> in all of the screens of your app) aren’t related to certain native modules provided by expo, but they’re there just because you use expo.</li>\n<li>Apps weight <a href=\"https://expo.canny.io/feature-requests/p/reducing-app-size\">really too much</a>.</li>\n<li>Requesting permissions you’ll never use, IDFA and other bad stuff <a href=\"https://github.com/expo/expo/issues/1138\">almost no one talk about</a>.</li>\n</ul>\n<h2>Ejecting? No thanks. I build from the ground up</h2>\n<p>This post was born from the needs to completely detach, but in the real meaning of the word, from expo in a client’s project.\nUsing the <code class=\"language-text\">expo eject</code> command is something I completely discourage. It’s something that even they are dismissing in favour of unimodules (more on later) and that will give you more headaches than directly porting back the entire app in a new bare react native project.</p>\n<h2> The things I love of Expo and tried to bring to the native side</h2>\n<p>There is a but to all this matter.\nIt’s true that I wouldn’t rely on it for a working project no more (mainly for the constant fear of failing the release date because of some unexpected problem I <strong>can’t</strong> quickly fix), but there are a couple of things I missed so much that I wanted to port somehow to the React Native side:</p>\n<ul>\n<li>OTA updates (<a href=\"https://github.com/microsoft/react-native-code-push\">CodePush</a> which is even a lot better and fine tuned to your needs)</li>\n<li>OTA channels configuration in the way I was used to create them in Expo at build time</li>\n<li>A simple way of building the app… couldn’t they think of a simple damn command? lol</li>\n</ul>\n<p>The last two will be the subject of a series of future posts :) Stay tuned</p>\n<h4>(Unimodules)</h4>\n<p>This is the “things will surely change” I was talking about in the beginning. Unimodules is an ambitious project of bringing the possibility to import even a single module between the many that are available in Expo in a pure React Native project.\nHow can they do this and what prevented it in the first place? Well, basically all the goodies we’re used to have in Expo relies on the fact that all the code we write will run in an already well configured and predictive react native app heavily configured, but not necessarily through the use of custom native modules, in order to expose some primitives that many native features use.\nSo they did what they were doing but through a common way in the React Native ecosystem: using native modules.\nBut since there was the need of a base that could let all the other modules work, they created the <a href=\"https://github.com/unimodules/react-native-unimodules\">Core Unimodules</a> which requires itself all kind of permissions for your app (an old story, right?) <a href=\"https://github.com/unimodules/react-native-unimodules#add-permission-usage-description-keys-to-infoplist\">just because it’s included</a>, even if you don’t require anything that needs those permissions to run (but I honestly believe it’s a matter of time they enable some sort of three shaking to avoid this).</p>","frontmatter":{"title":"Why I Dropped Expo and embraced React Native","section":null,"slug":"blog/why-i-dropped-expo-and-embraced-react-native","description":"What are the main problems with Expo at this time? And what can be the advantages of using a pure React Native workflow?"}}},{"node":{"fileAbsolutePath":"C:/Users/Giacomo/Documents/RepoPersonal/giacomocerquone.com/content/blog/fetch-wrapper/fetch-wrapper.md","html":"<p>Hi there, hope you’re enjoying the new website and blog.\nI graduated one month ago and so now that the university’s gone, I hope I’ll have some more time to dedicate to my personal stuff including this blog.</p>\n<h2>What is a wrapper</h2>\n<p>We obtain many different results when “wrapping” something: there are wrappers that turns out to be libraries and wrappers that are so small that they’re just an agglomerated amount of code that simplify other’s lives. Mine is one of the second kind.<br>\nI wanted to make this clear because I’ve seen projects like <a href=\"https://github.com/elbywan/wretch\">this</a> that are defined as wrappers but, despite the fact that it has no dependencies included, it has so many features and imposes so much syntax* and structures that it isn’t just a wrapper anymore, but a small lib.</p>\n<p>*<em>For syntax I mean functions and other named components of the lib that implements a pre-defined functionality</em></p>\n<h2>An API “service”</h2>\n<p>In my <a href=\"./aborting-fetch-react-native/\">older post</a> I mentioned of an Api “service” that I’d have share eventually.<br />\n<a href=\"https://gist.github.com/giacomocerquone/61a3b016c1803d44573978c13452989f\">Here</a> you can find the last revision of the code (it’s just a gist) but I won’t assure you to update it since I’m preparing another repo relative to some react native resources and this service will be part of it.</p>\n<p>I started to create my own Api service since the beginning of my work and the first one I used was found on a github repo that I don’t have anymore (not that it’s important since it’s completely changed).\nIt stayed the same for a long time (and it is the same in some old projects) but also for the sake of this article I decided to mutate its syntax and enhance some functionalities.</p>\n<h2>Abortion</h2>\n<p>I wrote the last article about cancellation and abortion of HTTP requests. I sent that article to some people that requested it on a github issue and a guy fixed a little error he spot in my post (it’s about the support for xhr that is, indeed, supported in react native while I thought it wasn’t, <a href=\"https://github.com/facebook/react-native/blob/master/Libraries/Network/XMLHttpRequest.js#L534\">go check yourself</a>).\nIn the meantime support for the AbortController API has <strong>landed in react native 0.60</strong> and so <strong>in this module I’ve also put up an abortion implementation and a working polyfill</strong> for environments that don’t support it (based on the last article’s code).</p>\n<h2>The challenge: defining the api</h2>\n<p>It has been a little bit challenging not implementing it, which <a href=\"https://github.com/jfet97\">jfet</a> helped a bit with his wise advices, but setting the boundaries of the functionalities that this wrapper had to provide and you can observe the pinnacle of these indecisions in the exported “getToken” function which is actually a strange thing considering that you could just import there what you’d set to the getToken (in fact I’ve added a comment about this).</p>\n<p>This is because I wanted to give some basic functionalities but I didn’t want to impose almost anything to the develope since this code is intended to be used knowingly from a developer that <strong>will need to modify it</strong>. Consider like a piece of code you’d see on stackoverflow.</p>\n<h3>How do we return a method to abort the call?</h3>\n<p>This has been the only true challenge. I needed a way to execute the call and at the same time return a method with which the user could abort it.\nI basically started thinking to implement a function to “prepare” a call and then effectively make the call. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> promise<span class=\"token punctuation\">,</span> cancel <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// and then</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But I wasn’t satisfied with it. I find it too undirected and the promise method is just useless, you can’t pass any new params to that function (nor there was the need) and all that structure was there just to allow me to return a cancel function along with the promise.<br />\nSo I had another idea…</p>\n<h2>The code</h2>\n<p>For brevity I’ll not insert every piece of code, to read it you can go to the gist.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> _toQueryString <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// EDIT here if you prefer a storage implementation or a store subscription etc.</span>\n<span class=\"token comment\">// you could actually also remove the getToken function and directly call it in the header below</span>\n<span class=\"token keyword\">const</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getToken</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_makeCancelable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">promise</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hasCanceled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cancelablePromise <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_call</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> setAbortMethod<span class=\"token punctuation\">,</span> auth <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// EDIT you can always strip abortcontroller from here if you need different usages</span>\n  <span class=\"token comment\">// since it can be tricky to handle the cancel function passed to setAbortMethod for specific usage</span>\n  <span class=\"token comment\">// sadly this is the best I could think of</span>\n  <span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> AbortController <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">===</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    route <span class=\"token operator\">+=</span> <span class=\"token function\">_toQueryString</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://jsonplaceholder.typicode.com/\"</span> <span class=\"token operator\">+</span> route<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Accept<span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>auth <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> Authorization<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// EDIT here based on your api</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>params <span class=\"token operator\">&amp;&amp;</span> method <span class=\"token operator\">!==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>controller <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> signal<span class=\"token punctuation\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currentFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>ok <span class=\"token operator\">?</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR handling highly depends on your api</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    setAbortMethod <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setAbortMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">currentFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> cancelablePromise<span class=\"token punctuation\">,</span> cancel <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">_makeCancelable</span><span class=\"token punctuation\">(</span>currentFetch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setAbortMethod <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setAbortMethod</span><span class=\"token punctuation\">(</span>cancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">cancelablePromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PATCH\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">_call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> methods<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Let’s start from the end.</h3>\n<p>I’ve exported an object that contains various methods (collected in the methods object) which one of this is the getToken that allows the developer to instruct the module on how to retrieve the token to pass in the headers.<br />\nYou’d use it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Api <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api.js\"</span>\nApi<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getToken</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getTokenSelector</span><span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// example of a redux implementation</span>\n<span class=\"token comment\">// or simply</span>\nApi<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getToken</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"token\"</span></code></pre></div>\n<p>Then we bind through an arrow function the five strings (that denote the method property of the fetch option) to one main <code class=\"language-text\">_call</code> method wich will be the handler of all the calls we make.<br />\nThese are the parameters:</p>\n<ul>\n<li><strong>method</strong>: it corresponds to the HTTP methods; you’ll never have access to this param</li>\n<li><strong>route</strong>: the parte after the baseUrl we set after</li>\n<li><strong>params</strong>: an object key value of the params to pass (in get it’ll be converted to query string)</li>\n<li><strong>setAbortMethod</strong>: the function to pass to obtain the abort method, (explanations down below)</li>\n<li><strong>auth</strong>: a flag to manually disable the passing of the token</li>\n</ul>\n<p>The last “auth” param is there to have a more fine-grained control over the headers added for authentication. I’ve encountered APIs that error out if passing a token when one isn’t required and considering that it’s not always convenient to edit or change the result of the getToken function, you can use this flag (it defaults to true).</p>\n<p><strong>Now the _call method</strong>.<br /></p>\n<p>The first thing that <code class=\"language-text\">_call</code> does is to check if the AbortController “constructor” exists. If so it istantiate a controller otherwise the controller gets a <code class=\"language-text\">null</code> value.\nThen we check if the request is a GET request and in that case we build a query string. I decided to not go for the URLSearchParams here since if I don’t wrong in React Native isn’t supported yet.</p>\n<p>We store the full url in the <code class=\"language-text\">url</code> value and then we create the option object of our request. Here is were we pass the controller signal, the params, the token and all the other headers we need.</p>\n<p>We then wrap the fetch in order to postpone the execution of the promise.\nThere is a following check for the existence of the AbortController and:</p>\n<ul>\n<li>if it exists, call the setAbortMethod and then return the unwrapped fetch we wrapped a few lines above</li>\n<li>if it doesn’t exist, we lend the wrapped fetch to the <code class=\"language-text\">_makeCancelable</code> function that is the code analyzed in the last article and proposed by facebook that will return the right promise to await for and the fake cancel method.</li>\n</ul>\n<h3> A note on the setAbortMethod</h3>\n<p>As anticipated earlier I had troubles finding the right way to return back the abort method to the user. The implementation I chose that you can see in the code, produces the following usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> cancel<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someRoute/1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> cancel <span class=\"token operator\">=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// awaits the data</span>\n<span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cancel the request</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>This should be enough to let you get started to use this code. You’ll find more examples in a react ecosystem in a small repo I’m about to prepare and that will be the subject for the next article!</p>","frontmatter":{"title":"A very simple fetch wrapper ready to use","section":null,"slug":"blog/fetch-wrapper","description":"An handy thin fetch wrapper in less of 100 lines featuring abortion (with polyfill for non supporting envs), token setter etc."}}},{"node":{"fileAbsolutePath":"C:/Users/Giacomo/Documents/RepoPersonal/giacomocerquone.com/content/blog/aborting-fetch-react-native/aborting-fetch-react-native.md","html":"<p>EDIT: this post is now, happily, outdated since the AbortController implementation has been included in React Native 0.60.0 (<a href=\"https://github.com/facebook/react-native/issues/18115#issuecomment-508389569\">comment here</a>)</p>\n<p>I’m doing this post since there is a lot of confusion going on around the react native (and web too actually) community around the matter of “cancelling a request” and many people asked me through the github issues to clear up the matter.</p>\n<h2>What do we mean by “closing a connection”?</h2>\n<p>This is really an important thing to understand.</p>\n<ol>\n<li>One thing is the interface exposed by the method used to request something</li>\n<li>And one thing is the actual method used to request something</li>\n</ol>\n<h3>What is this differentiation?</h3>\n<p>Because since we know that Fetch exposes its functionalities through Promises, we easily know how to reject the Promise relative to the request and doing so we “shut the door” to <strong>every future</strong> data that may come from that Promise. (1)\nBut what is the actual meaning of just rejecting the Promise that initiated the connection? It means that the connection will continue to live and, potentially, download lots of data in background. This because rejecting a promise <strong>operates just with the Fetch’s Promise but not with Fetch itself</strong> that won’t stop the work it is doing (examples and demonstrations later on).</p>\n<p>When we’re talking about few kilobytes (a json response that we’re waiting from a REST API for example) this is completely fine, and in that case rejecting the promise without stopping the real connection will be enough. This solution has come to the surface especially in relation to a famous issue about calling setState on an unmounted component. This issue has to do with the <a href=\"https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\">React internals</a> and it’s pretty easy to understand, also lot of blogs talk about it.\nAnyway this thing we just talked about may not affect you depending on how you wrote your code (for example you will not notice this problem if you use Redux).</p>\n<p>But what if we’re talking about the download of a heavier kind of data? This is the exact situation where I was in during the development of an enterprise application in React Native.\nImagine the UI showing a button to the user, while he’s in a mobile application, in a PWA or in a responsive website from a smartphone, that says “start downloading data” and then, when he press that button, the text of it changes with “stop downloading data” and he press that button again.\nWhat do we do? If we’re just rejecting the Promise it will continue to download those data since, as we said, <strong>rejecting the promise doesn’t result in a terminated connection</strong>. (2)\nAs a matter of fact, in this way, we potentially expose the user to pay extra money for his mobile carrier contract and this is something we want absolutely to avoid.</p>\n<p>So how can we tell Fetch to stop the connection and let the network module of our device rest?</p>\n<h2>What the specs says</h2>\n<p>If you ask me, the Fetch API is good but not that much. Not to be rude, but it seems like they almost forgot to design something that could be production ready.\nSo long story short, after a first 2015 “abort functionality” request, they succesfully introduced it in 2017.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\">Here the MDN specs</a> and here <a href=\"https://developers.google.com/web/updates/2017/09/abortable-fetch\">Jake Archibald talking about it in google developers</a>.</p>\n<p>Shortly this is an example of a cancelled request through the abort method (I will not go into details here since it isn’t in the scope of this article):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> signal <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span>signal\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Really cool, isn’t it? When I discovered this I ran into my code editor to edit my “api service” that wraps and enhance fetch, and implemented it.\nStarted the React Native project I was trying to abort my requests but nothing was happening (not even an error), so I immediately opened an <a href=\"https://github.com/facebook/react-native/issues/18115\">issue on the React Native github project</a>.\nUnfortunately, as I said at the beginning of this article, there is a lot of confusion about this issue and on that github thread there are a lot of wrong explanations (my included).</p>\n<h2>Polyfills, fake things that pretend to be true</h2>\n<p>I didn’t stop there. Noticing that it wasn’t working, I started trying available polyfills on NPM and they were actually (<strong>not</strong>) working. At first I wasn’t noticing that the connections weren’t killed, rather the polyfills were wrapping the originl window.fetch and rejecting the promise… they were doing the exact same thing I explained above and that you can easily do with ten/fifteen lines of code (actually these lines of code are the exact ones that are showed in the facebook blog post I linked above).</p>\n<h3>xhr.abort()? Can this be done?</h3>\n<p>Well it turns out that the xhr obscene syntax <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\">had an abort method</a> used to terminate connections. <del>While this could be a good approach to support old browsers when you’re doing a webapp, this isn’t a viable option in React Native since only fetch is baked inside the core.</del><br>\nActually I was wrong. As specified in this <a href=\"https://facebook.github.io/react-native/docs/network#using-other-networking-libraries\">doc page</a> xhr <strong>is</strong> backed into the React Native core and can be used to abort connection.<br>\nThe problem is that the fetch api is really cleaner than the xhr one and further more the migration from fetch to xhr may not be simple for certain apps (and honestly it seems a step back).</p>\n<h3>So are polyfills useless in React Native?</h3>\n<p>Yes, Yes and Yes. <strong>There will be no possible polyfills for this feature if the React Native core team doesn’t implement this first.</strong>. The only thing that it’s actually possible is to build a native module (or search for an existing one) that implement this feature on the native side too. Someone talked about this in a <a href=\"https://github.com/joltup/rn-fetch-blob/issues/140\">rn-fetch-blob issue</a> for example but I think that not even with that lib it’d work and it’s such a core functionality that I’d not rely on an external lib to accomplish it.</p>\n<h2>Conclusion</h2>\n<p>In React Native, right now, the best you can do is to use the trick showed in the previous facebook blog link and it’s something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeCancelable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">promise</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hasCanceled_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token keyword\">const</span> wrappedPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>hasCanceled_ <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isCanceled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>hasCanceled_ <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isCanceled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    promise<span class=\"token punctuation\">:</span> wrappedPromise<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      hasCanceled_ <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Anyway stay tuned because in the next article I will post my personal API service that I use for work that I built and tested time over time that implements this among other useful features that will let you forget about all the libs you know like axios, isomorphic-fetch etc. also diving even deeper on the code pasted above.</p>","frontmatter":{"title":"Aborting requests in React Native","section":null,"slug":"blog/aborting-fetch-react-native","description":"How can we close an active connection initiated with Fetch? And most important, what do we mean by \"closing a connection\"?"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}